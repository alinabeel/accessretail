# Generated by Django 2.2 on 2021-09-15 05:19

import core.mixinsModels
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import master_data.models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('is_active', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
                ('cell_acv', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('num_universe', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('optimal_panel', models.IntegerField(default=0)),
                ('condition_html', models.TextField(blank=True, null=True)),
                ('serialize_str', models.TextField(blank=True, null=True)),
                ('condition_json', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Cell',
                'verbose_name_plural': 'Cells',
                'db_table': 'cell',
            },
        ),
        migrations.CreateModel(
            name='Census',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('censusdata', django.contrib.postgres.fields.jsonb.JSONField()),
                ('heads', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'verbose_name': 'Census',
                'verbose_name_plural': 'Censuses',
                'db_table': 'census',
            },
        ),
        migrations.CreateModel(
            name='CityVillage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('rc_cut', models.CharField(max_length=500)),
                ('extra_1', models.CharField(max_length=500)),
                ('extra_2', models.CharField(max_length=500)),
                ('extra_3', models.CharField(max_length=500)),
                ('extra_4', models.CharField(max_length=500)),
                ('extra_5', models.CharField(max_length=500)),
                ('extra_6', models.CharField(max_length=500)),
                ('extra_7', models.CharField(max_length=500)),
                ('extra_8', models.CharField(max_length=500)),
                ('extra_9', models.CharField(max_length=500)),
                ('extra_10', models.CharField(max_length=500)),
                ('extra_11', models.CharField(max_length=500)),
                ('extra_12', models.CharField(max_length=500)),
                ('extra_13', models.CharField(max_length=500)),
                ('extra_14', models.CharField(max_length=500)),
                ('extra_15', models.CharField(max_length=500)),
                ('extra_16', models.CharField(max_length=500)),
                ('extra_17', models.CharField(max_length=500)),
                ('extra_18', models.CharField(max_length=500)),
                ('extra_19', models.CharField(max_length=500)),
                ('extra_20', models.CharField(max_length=500)),
                ('extra_21', models.CharField(max_length=500)),
                ('extra_22', models.CharField(max_length=500)),
                ('extra_23', models.CharField(max_length=500)),
                ('extra_24', models.CharField(max_length=500)),
                ('extra_25', models.CharField(max_length=500)),
                ('extra_26', models.CharField(max_length=500)),
                ('extra_27', models.CharField(max_length=500)),
                ('extra_28', models.CharField(max_length=500)),
                ('extra_29', models.CharField(max_length=500)),
                ('extra_30', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'CityVillage',
                'verbose_name_plural': 'CityVillages',
                'db_table': 'city_village',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ColLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('model_name', models.CharField(max_length=150)),
                ('col_name', models.CharField(max_length=150)),
                ('col_label', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name': 'ColLabel',
                'verbose_name_plural': 'ColLabels',
                'db_table': 'col_label',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'district',
            },
        ),
        migrations.CreateModel(
            name='IndexCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Index Category',
                'verbose_name_plural': 'Index Categries',
                'db_table': 'index_category',
            },
        ),
        migrations.CreateModel(
            name='Month',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(choices=[('January', 'January'), ('February', 'February'), ('March', 'March'), ('Aapril', 'Aapril'), ('May', 'May'), ('June', 'June'), ('July', 'July'), ('August', 'August'), ('September', 'September'), ('October', 'October'), ('November', 'November'), ('December', 'December')], max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('date', models.DateField(blank=True, null=True)),
                ('month', models.SmallIntegerField()),
                ('year', models.SmallIntegerField()),
                ('is_locked', models.BooleanField(default=False)),
                ('is_current_month', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Mont',
                'verbose_name_plural': 'Months',
                'db_table': 'month',
                'ordering': ['month', 'year'],
            },
        ),
        migrations.CreateModel(
            name='Outlet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('insert_date', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'verbose_name': 'Outlet',
                'verbose_name_plural': 'Outlets',
                'db_table': 'outlet',
            },
        ),
        migrations.CreateModel(
            name='OutletStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'OutletStatus',
                'verbose_name_plural': 'OutletStatuses',
                'db_table': 'outlet_status',
            },
        ),
        migrations.CreateModel(
            name='OutletType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('urbanity', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Outlet Type',
                'verbose_name_plural': 'Outlet Types',
                'db_table': 'outlet_type',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PanelProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('hand_nhand', models.CharField(blank=True, max_length=50, null=True)),
                ('nra_tagging', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('ra_tagging', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('ret_tagging', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('lms', models.CharField(blank=True, max_length=50, null=True)),
                ('cell_description', models.CharField(blank=True, max_length=1000, null=True)),
                ('audit_date', models.DateField(blank=True, null=True)),
                ('wtd_factor', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('num_factor', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('turnover', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('acv', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
            ],
            options={
                'verbose_name': 'PanelProfile',
                'verbose_name_plural': 'PanelProfiles',
                'db_table': 'panel_profile',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('pack_type', models.CharField(blank=True, max_length=150, null=True)),
                ('aggregation_level', models.CharField(blank=True, max_length=150, null=True)),
                ('company', models.CharField(blank=True, max_length=150, null=True)),
                ('brand', models.CharField(blank=True, max_length=150, null=True)),
                ('family', models.CharField(blank=True, max_length=150, null=True)),
                ('flavour_type', models.CharField(blank=True, max_length=150, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('price_segment', models.CharField(blank=True, max_length=150, null=True)),
                ('length_range', models.CharField(blank=True, max_length=150, null=True)),
                ('number_in_pack', models.IntegerField(blank=True, null=True)),
                ('price_per_stick', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='ProductAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('period', models.CharField(blank=True, max_length=50, null=True)),
                ('product_details', models.TextField(blank=True, null=True)),
                ('avaibility', models.BooleanField(default=True)),
                ('facing_empty', models.IntegerField(default=0)),
                ('facing_not_empty', models.IntegerField(default=0)),
                ('forward', models.IntegerField(default=0)),
                ('reserve', models.IntegerField(default=0)),
                ('total_none_empty_facing_forward_reserve', models.IntegerField(default=0)),
                ('purchaseother1', models.IntegerField(default=0)),
                ('purchaseother2', models.IntegerField(default=0)),
                ('purchasediary', models.IntegerField(default=0)),
                ('purchaseinvoice', models.IntegerField(default=0)),
                ('price_in_unit', models.DecimalField(decimal_places=6, max_digits=15)),
                ('price_in_pack', models.DecimalField(decimal_places=6, max_digits=15)),
                ('priceother', models.DecimalField(decimal_places=6, max_digits=15)),
                ('cash_discount', models.DecimalField(decimal_places=6, max_digits=15)),
                ('product_foc', models.IntegerField(default=0)),
                ('gift_with_purchase', models.IntegerField(default=0)),
                ('appreciation_award', models.IntegerField(default=0)),
                ('other_trade_promotion', models.IntegerField(default=0)),
                ('sales_unprojected_volume', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('sales_unprojected_value', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('sales_unprojected_units', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('sales_projected_volume', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('sales_projected_value', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('sales_projected_units', models.DecimalField(decimal_places=6, default=0, max_digits=15)),
                ('pack_without_graphic_health_warning', models.IntegerField(default=0)),
                ('no_of_pack_without_graphic_health_warning_facing', models.IntegerField(default=0)),
                ('no_of_pack_without_graphic_health_warning_total_stock', models.IntegerField(default=0)),
                ('no_of_pack_without_none_tax_stamp', models.IntegerField(default=0)),
                ('point_of_sales_signboard', models.IntegerField(default=0)),
                ('point_of_sales_poster', models.IntegerField(default=0)),
                ('point_of_sales_counter_shield', models.IntegerField(default=0)),
                ('point_of_sales_price_sticker', models.IntegerField(default=0)),
                ('point_of_sales_umbrella', models.IntegerField(default=0)),
                ('point_of_sales_counter_top_display', models.IntegerField(default=0)),
                ('point_of_sales_lighter', models.IntegerField(default=0)),
                ('point_of_sales_others', models.IntegerField(default=0)),
                ('point_of_sales_none', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Audit Data',
                'verbose_name_plural': 'Audit Data',
                'db_table': 'product_audit',
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Province',
                'verbose_name_plural': 'Provinces',
                'db_table': 'province',
            },
        ),
        migrations.CreateModel(
            name='RBD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'RBD',
                'verbose_name_plural': 'RBDs',
                'db_table': 'rbd',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.TextField(blank=True, default='')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
                'db_table': 'region',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RegionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name': 'Region Type',
                'verbose_name_plural': 'Region Types',
                'db_table': 'region_type',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tehsil',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('code', core.mixinsModels.UpperCaseCharField(max_length=50, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid')])),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('urbanity', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Tehsil',
                'verbose_name_plural': 'Tehsils',
                'db_table': 'tehsil',
            },
        ),
        migrations.CreateModel(
            name='Upload',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('import_mode', models.CharField(choices=[('APPEND', 'Append: Add records in the table.'), ('UPDATE', 'Update: If records exist update.'), ('APPENDUPDATE', 'Append/Update: If  records exist update otherwise add.'), ('REFRESH', 'Reresh: Delete all records and repopulate from the source.')], max_length=20)),
                ('frommodel', models.CharField(max_length=50)),
                ('file', models.FileField(upload_to=master_data.models.handle_upload_logs)),
                ('is_processing', models.CharField(blank=True, choices=[('UPLOADING', 'Uploading'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('ERROR', 'Error')], max_length=20, null=True)),
                ('process_message', models.CharField(blank=True, max_length=255, null=True)),
                ('skiped_records', models.IntegerField(blank=True, null=True)),
                ('updated_records', models.IntegerField(blank=True, null=True)),
                ('created_records', models.IntegerField(blank=True, null=True)),
                ('log', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Upload',
                'verbose_name_plural': 'Uploads',
                'db_table': 'upload',
            },
        ),
        migrations.CreateModel(
            name='UsableOutlet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'UsableOutlet',
                'verbose_name_plural': 'UsableOutlets',
                'db_table': 'usable_outlet',
            },
        ),
    ]
